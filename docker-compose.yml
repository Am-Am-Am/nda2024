version: '3.8'

services:
  web:
    build: .
    container_name: nda2024_1_web
    working_dir: /NDA2024-1
    command: >
      bash -c "
      echo 'Ожидание доступности PostgreSQL...';
      while ! nc -z db 5432; do
        sleep 1;
      done;
      echo 'PostgreSQL доступен!';
      
      echo 'Применение миграций...';
      python manage.py migrate;
      
      echo 'Проверка суперпользователя...';
      if [ -n \"$$DJANGO_SUPERUSER_USERNAME\" ]; then
        echo 'Создание суперпользователя...';
        python manage.py createsuperuser \
          --noinput \
          --username $$DJANGO_SUPERUSER_USERNAME \
          --email $$DJANGO_SUPERUSER_EMAIL || true;
      fi;
      
      echo 'Запуск Gunicorn...';
      gunicorn nda.wsgi:application --bind 0.0.0.0:8000;
      "
    volumes:
      - .:/NDA2024-1
      - static_volume:/NDA2024-1/staticfiles  # Для production (STATIC_ROOT)
      - media_volume:/NDA2024-1/media         # Если есть MEDIA_ROOT
    env_file:
      - .env
    environment:
      PYTHONPATH: /NDA2024-1
      DJANGO_SETTINGS_MODULE: nda.settings
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend

  db:
    image: postgres:17-alpine
    container_name: nda2024_1_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 2s
      timeout: 2s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - backend

  prometheus:
    image: prom/prometheus
    container_name: nda2024_1_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - backend

  grafana:
    image: grafana/grafana
    container_name: nda2024_1_grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - backend

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - backend

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    env_file:
      - .env
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - db
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  grafana_data:
  static_volume:  # Добавьте это
  media_volume: 